Thrift by Example
=======================================

Generating code with Thrift
---------------------------

After creating a .thrift file (See :doc:`thrift-file`) you are now ready to run Thrift in order to generate code in your targeted languages. The usage of thrift command is: ::

	thrift [options] file

For example if you want to generate code for java you should type: ::

	thrift -r --gen java filame.thrift

The above command will generate a directory gen-java which will contain all the code generated by Thrift in java. The option -r is to specify that I want to generate recursively code for potential includes on our .thrift file.
After generating code you are now ready to create your client and server code and use the Thrift generated code to do the hard work for you, as you will se below.


``Notice: When trying to run the python server you may encounter the error:`` ::

	ImportError: No module named Thrift

``This can be easily fixed by going to the directory lib/py on the thrift installation directory and run the following command to install the thrift module to your python libraries:`` ::

	sudo python setup.py install


A Simple Example to warm-up
---------------------------


On this example I will demonstrate the creation of a simple multiplication service. 

* Lets create first the .thrift definition of our service. The .thrift file I am going to use is the same you saw in the :doc:`thrift-file` and is as shown below: ::

	namespace java tutorial
	namespace py tutorial

	typedef i32 int // We can use typedef to get pretty names for the types we are using 
	service MultiplicationService
	{
		int multiply(1:int n1, 2:int n2),
	}

* Name this file multiple.thrift and then run the below commands to generate code for java and python ::

	thrift --gen java multiple.thrift
	thrift --gen py multiple.thrift

After running the commands Thrift should generate code inside the directories gen-java/tutorial and gen-py/tutorial for Java and Python respectively. 
``Remember to use sudo in case the directories are not created!``
It would be useful to take a look on this code to get a better understanding of what code Thrift generates for you. 
You can find a short explanation of the code here: :doc:`multiplication-service`
	

* Now we are ready to write our own code. Lets first write some Java code for our client and server and then we will also write a Python client to send requests to our server. We will not need to change anything on the server part to do this!

Multiplication Handler
^^^^^^^^^^^^^^^^^^^^^^

Here is the MultiplicationHandler class in which I implement the interface specified before in our multi.thrift definition and for which Thrift had already generated code.

 .. literalinclude:: code_examples/MultiplicationHandler.java
	:language: java
	
Java Multiplication Server
^^^^^^^^^^^^^^^^^^^^^^^^^^

Here is the MultiplicationServer class in which I have implemented a simple server. With slightly different configuration this server can become secure as you will see in the next example.
The only thing worth mentioning about the server implementation is the usage of the Processor class that is auto-generated by Thrift. The Processor does two simple things. Reads data from an input stream and writes data to an output stream. The processor reads data from the input, processes the data (actually uses the handler specified by the user to process the data) and the writes the processed data to the output. Finally, I should mention that for this example I used the simple server implemention, but it would be as easy to use any of the implementations offered by thrift (threadPoolServer or nonBlockingServer).

 .. literalinclude:: code_examples/MultiplicationServer.java
	:language: java


Java Multiplication Client
^^^^^^^^^^^^^^^^^^^^^^^^^^

Important things to notice on the client code is the use of the TBinaryProtocol for the serializitaion and deserialization part. I could also use the compact, the JSON protocol or any other protocol supported by thrift. For more details on the protocols you can use please refer to the :doc:`thrift-stack` section of this tutorial.
Another importand thing to notice is the use of the client and the coresponding client.multiply() method provided to us by the auto-generated thrift code. This call behind the scenes calls the TServiceClient.sendBase() method that will write the data to the wire.

 .. literalinclude:: code_examples/MultiplicationClient.java
	:language: java

Python Multiplication Client
^^^^^^^^^^^^^^^^^^^^^^^^^^^^

The python client implements anything as discussed for the java client. The language syntax is the only thing I had to change on my approach.

 .. literalinclude:: code_examples/MultiplicationClient.py
	:language: python

A More Complicated Example
---------------------------
Now you are ready to see something a little bit more complicated. The bellow example describes the Thrift tutorial code included in the Thrift installation directory. The .thrift file for the calculator service provided on the Thrift installation, also servers the role of a short Thrift documentation. For this reason, I have deleted part of the comments on the file to avoid repeating things that I have already discussed. Follow the comments to understand how you can use thrift to generate code for more complicated services. Notice that this time code will be generated by Thrift not only for the Calculator but also for the exception, the enum Operation, the tutorialConstants and the struct Work. Of course the code for those files is much simpler as expected.

 .. literalinclude:: code_examples/tutorial.thrift.cleaned
	:language: c


Calculator Service Handler
^^^^^^^^^^^^^^^^^^^^^^^^^^

Nothing really changed here compared to the simple example you just saw. There are just more method interfaces implemented.

.. literalinclude:: code_examples/CalculatorHandler.java
	:language: java

Java Calculator Server
^^^^^^^^^^^^^^^^^^^^^^

Most of the code for the server remains the same as above. What is added here is the option of a secure server that you can use to provide authenticated service. With comments you can also see what the code for a multi threaded server looks like.

.. literalinclude:: code_examples/JavaServer.java
	:language: java

Java Calculator Client
^^^^^^^^^^^^^^^^^^^^^^

But for the option given to the user to choose between the simple and the secure server nothing changed to the code of the client as well. We simpe call more operations with some additional calls.

.. literalinclude:: code_examples/JavaClient.java
	:language: java

.. toctree::
   :maxdepth: 2
   
   multiplication-service

